@page "/test"
@using System.Security.Claims;
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Inicio</PageTitle>

<style>
    /* Estilos CSS */
    .img-container {
        max-width: 100px; /* Ajusta el ancho máximo según tus necesidades */
        display: inline-block; /* Alinea las imágenes en línea */
    }

    .img-container img {
        width: 100%; /* Hace que la imagen ocupe el 100% del contenedor */
        height: auto; /* Mantiene la proporción de aspecto */
    }

    .oi {
        font-size: 1.2em;
    }

    .card:hover {
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    }
    .titulo {
        background-image: linear-gradient(180deg, rgb(0, 29, 82) 0%, rgb(0, 0, 0) 70%); /* Fondo oscuro */
        color: #ffffff; /* Texto blanco */
        padding: 10px; /* Añadir espacio alrededor del texto */
    }
</style>

<h3 class="mt-4 titulo">
    <span class="oi oi-dashboard oi mr-2"></span>
    <strong>FactuSystem Dashboard</strong> 
</h3>


@if (!string.IsNullOrEmpty(UserId))
{
    <div>
        <p>UserId: @UserId</p>
    </div>
}
else
{
    <p>No se ha encontrado un UserId válido.</p>
}

@code
{
    public string UserId = "";

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
            if (userIdClaim != null)
            {
                UserId = userIdClaim.Value;
            }
        }
    }
}
