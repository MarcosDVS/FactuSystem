@page "/test"
@using FactuSystem.Data.Response;
@using FactuSystem.Data.Request;
@inject IFacturaServices facturaServices;
@inject IPagoServices pagoServices;
@inject ICuadrarCajaServices cuadrarCajaServices;

<PageTitle>Inicio</PageTitle>

<style>
    /* Estilos CSS */
    .img-container {
        max-width: 100px; /* Ajusta el ancho máximo según tus necesidades */
        display: inline-block; /* Alinea las imágenes en línea */
    }

    .img-container img {
        width: 100%; /* Hace que la imagen ocupe el 100% del contenedor */
        height: auto; /* Mantiene la proporción de aspecto */
    }

    .oi {
        font-size: 1.2em;
    }

    .card:hover {
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    }
    .titulo {
        background-image: linear-gradient(180deg, rgb(0, 29, 82) 0%, rgb(0, 0, 0) 70%); /* Fondo oscuro */
        color: #ffffff; /* Texto blanco */
        padding: 10px; /* Añadir espacio alrededor del texto */
    }
</style>

<h3 class="mt-4 titulo">
    <span class="oi oi-dashboard oi mr-2"></span>
    <strong>FactuSystem Dashboard</strong> 
</h3>

<div class="container mt-4">
    <div class="row mt-4">
        <div class="col-md-6">
            <div class="card">
                <h5 class="card-header bg-dark text-white">
                    <span class="oi oi-dollar oi mr-2"></span>
                    <strong>Cuadrar Caja</strong>
                </h5>
                <EditForm Model="request" OnValidSubmit="Send">
                    <div class="card-body">
                        <div class="form-group">
                            <label for="nombreCompleto">Nombre del Cajero</label>
                            <input type="text" class="form-control" id="nombreCompleto" 
                                @bind-value="request.Cajero" 
                                required />
                        </div>
                        <div class="form-group">
                            <label for="nombreCompleto">Monto</label>
                            <input type="number" class="form-control" id="nombreCompleto" 
                                @bind-value="request.Monto" readonly
                                required />
                        </div>
                        <div class="form-group">
                            <label for="nombreCompleto">Monto Cuadrado</label>
                            <input type="number" class="form-control" id="nombreCompleto" 
                                @bind-value="request.MontoCuadrado" required />
                        </div>

                    </div>
                    <div class="card-footer bg-dark text-white">
                        <div class="btn-group">
                            <button type="submit" class="btn btn-primary">Guardar</button>
                            <button type="button" class="btn btn-secondary" @onclick="Clear">Cerrar</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">
                        <span class="oi oi-dollar oi mr-2"></span>
                        <strong>Dinero en caja</strong>
                    </h5>
                    <p class="card-text">Monto: $@DineroEnCaja.ToString("N2")</p>
                </div>
            </div>
        </div>
    </div>
    <a class="nav-link active text-dark" >
        <span class="oi oi-person"></span>
        <strong>Abusador</strong>
    </a>
</div>


@code
{
    public List<FacturaResponse> Facturas { get; set; } = new();
    public List<PagoResponse> Pagos { get; set; } = new();
    public List<CuadrarCajaResponse> Cajas { get; set; } = new();
    public CuadrarCajaRequest request { get; set; } = new();
    public string Filtro { get; set; } = "";
    public string Cashier { get; set; } = "";
    public decimal DineroEnCaja = 0;
    public decimal IngresoTotal = 0;
    void AllSell()
    {
        DateTime today = DateTime.Today;

        var Contado = Facturas
            .Where(c => (c.TypePayment == "1" || c.SaldoPendiente == 0) && c.Fecha.Date == today)
            .Sum(c => c.SubTotal);

        var Credito = Facturas
            .Where(c => (c.TypePayment == "2" && c.SaldoPendiente > 0) && c.Fecha.Date == today)
            .Sum(c => c.SaldoPendiente);

        IngresoTotal = Contado + Credito;
    }

    void CashInBox()
    {
        DateTime today = DateTime.Today;

        var Contado = Facturas
            .Where(c => (c.TypePayment == "1" || c.SaldoPendiente == 0) && c.Fecha.Date == today)
            .Sum(c => c.SubTotal);

        var Credito = Facturas
            .Where(c => (c.TypePayment == "2" && c.SaldoPendiente > 0) && c.Fecha.Date == today)
            .Sum(c => c.SaldoPendiente);

        var Pago = (decimal)Pagos
            .Where(c => c.Fecha.Date == today)
            .Sum(c => c.MontoPagado);

        DineroEnCaja = Contado + Pago;
        request.Monto = DineroEnCaja;
    }

    async Task Consultar()
    {
        var resultado = await facturaServices.Consultar(Filtro);
        if (resultado.Success)
        {
            Facturas = resultado.Data?.OrderByDescending(f => f.Fecha).ToList() ?? new List<FacturaResponse>();
        }
        StateHasChanged();
    }
    async Task CargarPagos()
    {
        var resultado =
        await pagoServices.Consultar(Filtro);
        if (resultado.Success)
        {
            Pagos = resultado.Data!;
        }
    }
    async Task CargarCajas()
    {
        var resultado =
        await cuadrarCajaServices.Consultar(Filtro);
        if (resultado.Success)
        {
            Cajas = resultado.Data!;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await Consultar();
        await CargarPagos();
        await CargarCajas();
        CashInBox();
        AllSell();
        
    }

    void Clear()
    {
        request  = new CuadrarCajaRequest();
    }
    
    public async Task Send()
    {
        if(request.Id == 0)
        {
            //Debo registrar el contacto..
            var r = await cuadrarCajaServices.Crear(request);
            if (r.Success)
            {
                Clear();
                await CargarCajas();
                StateHasChanged();
            }
        }
        else
        {
            //Debo solicitar modificar el contacto...
            var r = await cuadrarCajaServices.Modificar(request);
            if (r.Success)
            {
                Clear();
                await CargarCajas();
                StateHasChanged();
            }
        }
    }
}