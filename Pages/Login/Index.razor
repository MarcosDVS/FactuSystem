@page "/"
@using FactuSystem.Authentication;
@inject IUserAccountService userAccountService
@inject AuthenticationStateProvider authStateProvider
<style>
    body{
        background-color: rgba(0, 0, 0, 0.5);
    }
</style>
<br/>
<br/>
<br/>
<div class="container">
    <div class="row justify-content-center">
        <div class="card p-4" style="width: 25rem; border-radius: 10px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
            <div class="text-center">
                <svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" fill="currentColor" class="bi bi-person-circle" viewBox="0 0 16 16">
                    <path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0z" />
                    <path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1z" />
                </svg>
            </div>
            <h2 class="mb-3 text-center">Iniciar Sesi√≥n</h2>
            <form>
                <div class="form-group mb-3">
                    <input type="email" class="form-control" @bind="model.UserName" placeholder="User Name">
                </div>
                <div class="form-group mb-3">
                    <input type="password" class="form-control" @bind="model.Password" placeholder="Password">
                </div>
                @*<div class="d-flex justify-content-center mb-3">
                    <div class="btn-group">
                        <button type="button" class="btn btn-outline-primary" @onclick="Authenticate">Sing in</button>
                    </div>
                </div>*@
            </form>
            <div class="d-flex justify-content-center">
                <button type="button" class="btn btn-primary" @onclick="Authenticate">Sign In</button>
            </div>
            @if (!string.IsNullOrEmpty(mensajeError))
            {
                <div class="alert alert-warning mt-3" role="alert">
                    <p class="text-dark text-center fw-bold">@mensajeError</p>
                </div>
            }
        </div>
    </div>

</div>

@code 
{
    private string mensajeError = "";
    private LoginModel model = new LoginModel();

    private class LoginModel
    {
        public string UserName { get; set; }
        public string Password { get; set; }
    }

    private async Task Authenticate()
    {
        if (string.IsNullOrWhiteSpace(model.UserName) || string.IsNullOrWhiteSpace(model.Password))
        {
            mensajeError = "Complete los campos patr√≥n üòí";
            
        }
        else
        {
            var userAccount = userAccountService.GetByUserName(model.UserName);
            if(userAccount == null || userAccount.Password != model.Password)
            {
                mensajeError = "Credenciales incorrectas ‚ùå";
                return;
            }

            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession
                {
                    UserId = userAccount.Id, // Include UserId
                    UserName = userAccount.Email,
                    Name = userAccount.Nombre + " " + userAccount.Apellidos,
                    Role = userAccount.Role
                });
                mensajeError = null;
            urlHelper.NavigateTo("/inicio", true);
        }
        
    }

    protected override async Task OnInitializedAsync()
    {
        // Llamada a CrearUsuarioAdmin antes de intentar autenticar
        await usuarioServices.CrearUsuarioAdmin();
        // Resto de tu c√≥digo OnInitializedAsync

        await clienteServices.CrearCliente();
    }
}
