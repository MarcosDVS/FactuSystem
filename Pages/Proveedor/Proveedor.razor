@page "/proveedor"
@inject IJSRuntime JSRuntime;
@attribute [Authorize]

<style>
    /* Estilo para resaltar las filas al pasar el cursor */
    .table-hover tbody tr:hover {
        background-color: #f5f5f5; /* Cambia el color al pasar el cursor */
    }

    /* Estilo para el contenedor de la tabla */
    .table-container {
        margin-top: 20px;
    }

    /* Estilo para el cuerpo de la tarjeta */
    .card-body {
        padding: 20px;
    }

    /* Estilo para centrar el texto en las celdas de la tabla */
    .table th, .table td {
        text-align: center;
    }

    .titulo-proveedores {
        background-image: linear-gradient(180deg, rgb(0, 29, 82) 0%, rgb(0, 0, 0) 70%);
        color: #ffffff; /* Texto blanco */
        text-align: center; /* Centrar texto */
        padding: 10px; /* Añadir espacio alrededor del texto */
    }
</style>

<h1 class="titulo-proveedores">Listado de Proveedores</h1>


<div class="modal" style="display: @(showCard ? "block" : "none"); background-color: rgba(0, 0, 0, 0.5);" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"><b>@TituloForm</b></h5>
                <button type="button" class="close btn btn-outline-danger" data-dismiss="modal" aria-label="Close" @onclick="CloseCard">
                    <span aria-hidden="true" class="oi oi-x"></span>
                </button>
            </div>

            <EditForm Model="proveedorRequest" OnValidSubmit="Send">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="modal-body">
                        <div class="form-group input-group mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text bg-white text-black border-0">
                                    <span class="oi oi-person"></span>
                                </span>
                            </div>
                            <input type="text" class="form-control" placeholder="Nombre" 
                            @bind-value="proveedorRequest.NombreEmp" required />
                        </div>
                        <div class="form-group input-group mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text bg-white text-black border-0">
                                    <span class="oi oi-envelope-closed"></span>
                                </span>
                            </div>
                            <input id="emailInput" type="email" class="form-control" placeholder="Email" 
                            @bind-value="proveedorRequest.Email" required />
                        </div>

                       
                        <div class="form-group input-group mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text bg-white text-black border-0">
                                    <span class="oi oi-phone"></span>
                                </span>
                            </div>
                            <input 
                                class="form-control" 
                                placeholder="Teléfono" type="tel"
                                @bind-value="proveedorRequest.Telefono" 
                                oninput="this.value = this.value.replace(/[^0-9]/g, '').slice(0, 10)" 
                                required 
                                pattern="\d{10}" 
                                title="Debe tener 10 dígitos"
                            />

                        </div>

                        <div class="form-group input-group mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text bg-white text-black border-0">
                                    <span class="oi oi-map-marker"></span>
                                </span>
                            </div>
                            <input class="form-control" placeholder="Dirección" 
                            @bind-value="proveedorRequest.Direccion" required />
                        </div>
                    </div>
                    

                    <div class="modal-footer">
                        <div class="btn-group">
                            <button type="submit" class="btn btn-outline-primary">
                                <span class="oi oi-check"></span> Guardar
                            </button>
                        </div>
                    </div>
                </EditForm>

        </div>
    </div>
</div>

<div class="table-container">
    <div class="card col-12">
        <div class="card-body">
            <!-- Button trigger modal -->
            <button class="btn btn-outline-success d-print-none" @onclick="ShowCard">
                <span class="oi oi-plus"></span>
            </button>
            <button class="btn btn-outline-primary d-print-none" 
                @onclick="async ()=>{await PrintPageAsync();}">
                <span class="oi oi-print"></span>
            </button>

            <div class="row">
                <div class="col-8"></div>
                <div class="col-4">
                    <div class="input-group d-print-none">
                        <input type="text" class="form-control border-0 border-bottom" 
                        placeholder="Buscar por nombre" @bind="Filtro">
                        <button class="btn btn-outline input-group-text border-0 bg-white" 
                            type="button" id="button-addon2" @onclick="()=>CargarContactos()">
                            <span class="oi oi-magnifying-glass text-black"></span>
                        </button>
                    </div>
                </div>
            </div>

            <div class="row-12 mt-2">
                <table class="table table-hover table-striped">
                    <thead style="background-image: linear-gradient(180deg, rgb(0, 29, 82) 0%, rgb(0, 0, 0) 70%); color: #ffffff;">
                        <tr>
                            <th>#</th>
                            <th>Nombre completo</th>
                            <th>Correo</th>
                            <th>Telefono</th>
                            <th>Direccion</th>
                            <th class="d-print-none">...</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var proveedorRow in Proveedores)
                        {
                            <tr>
                                <td>@proveedorRow.Id</td>
                                <td>@proveedorRow.NombreEmp</td>
                                <td>@proveedorRow.Email</td>
                                <td>@FormatPhoneNumber(proveedorRow.Telefono)</td>
                                <td>@proveedorRow.Direccion</td>
                                <td class="d-print-none">
                                    <button @onclick="()=>Seleccionar(proveedorRow.Id)"
                                        class="btn btn-outline-warning">
                                        <span class="oi oi-pencil"></span>
                                    </button>
                                    <button @onclick="()=>Eliminar(proveedorRow)"
                                        class="btn btn-outline-danger">
                                        <span class="oi oi-trash"></span>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    
</div>

@code {
    public string TituloForm => proveedorRequest.Id == 0 ? 
    "Agregar proveedor" : "Modificar proveedor";
    
    public string Filtro { get; set; } = "";
    public bool ShowForm { get; set; } = false;
    public List<ProveedorResponse> Proveedores { get; set; } = new();
    public ProveedorRequest proveedorRequest { get; set; } = new();
    public bool showCard { get; set; } = false;

    private string FormatPhoneNumber(string phoneNumber)
    {
        // Verifica si el número telefónico tiene la longitud esperada
        if (phoneNumber.Length == 10)
        {
            // Formatea el número telefónico
            return $"({phoneNumber.Substring(0, 3)}) {phoneNumber.Substring(3, 3)}-{phoneNumber.Substring(6)}";
        }
        else
        {
            // Devuelve el número telefónico sin cambios si no tiene la longitud esperada
            return phoneNumber;
        }
    }
    void ShowCard()
    {
        showCard = true;
    }

    void CloseCard()
    {
        proveedorRequest  = new ProveedorRequest();
        showCard = false;
    }

    async Task CargarContactos()
    {
        var resultado =
        await proveedorServices.Consultar(Filtro);
        if (resultado.Success)
        {
            Proveedores = resultado.Data!;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarContactos();
    }

    void Cancelar()
    {
        proveedorRequest  = new ProveedorRequest();
        showCard = false;
    }
    public async Task Send()
    {
        if(proveedorRequest.Id == 0)
        {
            //Debo registrar el contacto..
            var r = await proveedorServices.Crear(proveedorRequest);
            if (r.Success)
            {
                Cancelar();
                await CargarContactos();
                StateHasChanged();
            }
        }
        else
        {
            //Debo solicitar modificar el contacto...
            var r = await proveedorServices.Modificar(proveedorRequest);
            if (r.Success)
            {
                Cancelar();
                await CargarContactos();
                StateHasChanged();
            }
        }
    }

    public void Seleccionar(int Id)
    {
        showCard = true;
        proveedorRequest = Proveedores
        .Where(c => c.Id == Id)
        .Select(c => c.ToRequest())
        .FirstOrDefault() ?? new ProveedorRequest();
    }
    public async Task Eliminar(ProveedorResponse item)
    {
        var resultado = await proveedorServices.Eliminar(item.ToRequest());
        if (resultado.Success)
        {
            await CargarContactos();
            StateHasChanged();
        }
    }

    private async Task PrintPageAsync()
    {
        // Llama a la función JavaScript para imprimir la página
        await JSRuntime.InvokeVoidAsync("printPage");
    }
}