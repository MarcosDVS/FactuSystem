@page "/factura/cobrar"
@using FactuSystem.Data.Response;
@using FactuSystem.Data.Request;
@inject IJSRuntime JSRuntime;
@attribute [Authorize]

<style>
    /* Estilo para el contenedor de la tabla */
    .table-container {
        margin-top: 20px;
    }
    /* Estilo para el cuerpo de la tarjeta */
    .card-body {
        padding: 20px;
    }

    /* Estilo para centrar el texto en las celdas de la tabla */
    .table th, .table td {
        text-align: center;
    }

</style>

@if(Form)
{
    <EditForm Model="facturaRequest">
        @*Disenar el espacio para el cliente o contacto a facturarle*@
        <div class="input-group mb-3">
            <select class="form-control" @bind="@facturaRequest.ClienteId" required readonly>
                <option disabled selected>Cliente</option>
                @foreach (var contacto in Contactos)
                {
                    <option disabled value="@contacto.Id" >
                        @contacto.Nombre @contacto.Apellidos
                    </option>
                }
            </select>
            
            <button class="btn btn-outline-primary d-print-none" 
                @onclick="async ()=>{await PrintPageAsync();}">
                <span class="oi oi-print"></span>
            </button>
            <button 
                class="btn btn-outline-danger d-print-none"
                type="button" id="button-addon2"
                @onclick="Back2">
                <span class="oi oi-arrow-thick-left"></span>
            </button>
        </div>

        @*Disenar el espacio para los productos a facturar*@
        @if(Role=="Admin")
        {
            <div class="card p-2 d-print-none">
                <div class="card-header card-title">
                    <strong>Â¿Que desea el cliente?</strong>
                </div>
                <div class="input-group mb-3 mt-2">
                    <input class="form-control"
                        placeholder="Producto"
                        aria-label="Producto"
                        aria-describedby="button-addon2" list="productos"
                        @onchange="(value)=>{
                            var r = Productos.FirstOrDefault(p=>p.CodigoDescripcion == value.Value!.ToString());
                            if(r!=null)
                            BuscarPercio(r.Id);
                            }"
                            />
                    <datalist id="productos">
                        @foreach (var producto in Productos)
                        {
                            <option value="@producto.CodigoDescripcion" @onclick="()=>BuscarPercio(producto.Id)"></option>
                        }
                    </datalist>
                    
                </div>
                <div class="input-group mb-3">
                    <span class="form-control w-50">
                        $@Precio.ToString("N2")
                    </span>
                    <input class="form-control w-25" type="number" @bind="@Cantidad" />
                    <button class="btn btn-success btn-lg d-print-none"
                        type="button" id="button-addon2"
                        @onclick="async ()=>{await AgregarAlDetalle();}"
                        title="Agregar producto al detalle">
                        <span class="oi oi-collapse-down"></span>
                    </button>
                </div>
                <div class="input-group mb-3">
                    <label for="Descuento" class="input-group-text">Descuento:</label>
                    <input @bind="detalleFacturaRequest.Descuento" type="number" 
                    id="Descuento" placeholder="Descuento" class="form-control" />
                </div>
                @if (Message != null)
                {
                    <div class="alert-warning">
                        <span class="text-dark">@Message</span>
                    </div>
                }
            </div>
        }

        
        @*Disenar los elementos que se cargan a la factura*@
        <h5 class="mt-1"><b>Detalle de la factura NÂ°:</b> @facturaRequest.Id</h5>
        <table class="table table-hover">
            <thead class="bg-black text-white">
                <tr>
                    <th class="col w-25">
                        Cantidad
                    </th>
                    <th>Descripcion</th>
                    <th>Costo</th>
                    <th>Descuento</th>
                    <th>Total</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var detalle in facturaRequest.Detalles)
                {
                    <tr>
                        <td class="col w-25 text-center">
                            <div class="input-group d-print-none">
                                <InputNumber 
                                    class="col form-control" 
                                    @bind-Value="@detalle.Cantidad" readonly/>
                                <div class="col d-print-none">
                                    @if(Role=="Admin")
                                    {
                                        <div class="form-group">
                                            <span @onclick="async()=>{await Add(detalle.ProductoId);}" 
                                                class="oi oi-caret-top">
                                            </span>
                                        </div>
                                        <div class="form-group">
                                            <span @onclick="async()=>{await Remove(detalle.ProductoId);}" 
                                                class="oi oi-caret-bottom">
                                            </span>
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="d-none d-print-block">
                                @detalle.Cantidad
                            </div>
                        </td>
                        <td class="col w-25">
                            @detalle.Descripcion
                        </td>
                        <td class="col w-25">
                            $@($"{(detalle.Precio):N2}")
                        </td>
                        <td class="col w-25">
                            <span style="white-space: nowrap;">
                                $@($"{(detalle.SubTotal * (detalle.Descuento / 100)):N2}")
                            </span>
                        </td>

                        <td class="col text-center">
                            $@($"{(detalle.SubTotal - detalle.TotalDesc):N2}")
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="row">
            @*Resumen de la venta*@
            <div class="col card mt-1">
                <div class="row card-header">
                    <!-- Encabezado de la tarjeta -->
                    <div class="col-8">
                        <h5><b>Resumen:</b></h5>
                    </div>
                    <div class="col-4">
                        <!-- SecciÃ³n de tipo de venta y botÃ³n de actualizaciÃ³n -->
                        <div class="input-group">
                            <select class="form-control" readonly required @bind="@facturaRequest.TypePayment">
                                <option disabled selected value="">Tipo de Venta</option>
                                <option disabled value="1">Contado ðŸ’²</option>
                                <option disabled value="2">CrÃ©dito ðŸ’³</option>
                            </select>
                        </div>
                    </div>
                    
                </div>

                <div class="card-body text-left">
                    <div class="row">
                        <div class="col">
                            <!-- Lista de resumen -->
                            <ul class="list-unstyled">
                                <li class="mb-2">
                                    <strong>SubTotal: </strong>
                                    <span class="text-primary">$@($"{(facturaRequest.SubTotal - facturaRequest.ITBIS):N2}")</span>
                                </li>
                                <li class="mb-2">
                                    <strong>ITBIS:</strong>
                                    <span class="text-danger">$@($"{(facturaRequest.ITBIS):N2}")</span>
                                </li>
                                <li class="mb-2">
                                    <strong>Descuento: </strong>
                                    <span class="text-success">$@facturaRequest.TotalDesc.ToString("N2")</span>
                                </li>
                                <li class="mb-2">
                                    <strong>Importe: </strong>
                                    <span class="text-dark">
                                        <strong>$@($"{(facturaRequest.SubTotal - facturaRequest.TotalDesc):N2}")</strong>
                                    </span>
                                </li>
                                <li class="mb-2">
                                    <strong>Pagado: </strong>
                                    <span class="text-success">$@($"{(facturaRequest.DineroPagado):N2}")</span>
                                </li>
                                <li >
                                    <strong>Pendiente: </strong>
                                    <span class="text-danger">
                                        <strong>$@($"{(facturaRequest.SaldoPendiente):N2}")</strong>
                                    </span>
                                </li>

                            </ul>
                        </div>
                    </div>
                </div>

            </div>
        </div>

    </EditForm>
}
else
{
    @if(Facturas != null)
    {
        <div class="row">
            <div class="col-12">
                <h1 class="d-none d-print-block text-center">@TituloForm</h1>
            </div>
        </div>
        <div class="modal" style="display: @(detailsPago ? "block" : "none"); background-color: rgba(0, 0, 0, 0.5);" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header bg-dark text-white">
                        <h5 class="modal-title"><b>Detalles de los Pagos</b></h5>
                        <button type="button" class="close btn btn-danger" data-dismiss="modal" 
                        aria-label="Close" @onclick="CloseDetailsPago">
                            <span aria-hidden="true" class="oi oi-x"></span>
                        </button>
                    </div>
                    <div class="modal-body">
                        @if(FacturaSinPagos)
                        {
                            <div class="alert alert-warning" role="alert">
                                <h4 class="alert-heading">Â¡Aviso!</h4>
                                <p>Este cliente aÃºn no ha realizado pagos.</p>
                                <hr>
                                <p class="mb-0">Por favor, asegÃºrese de coordinar con el cliente para procesar los pagos pendientes. Â¡Gracias!</p>
                            </div>
                        }
                        else{
                            <div class="alert-warning text-dark" role="alert" style="display: @(string.IsNullOrEmpty(ErrorMessage) ? "none" : "block")">
                                <strong>@ErrorMessage</strong> 
                            </div>
                            <table class="table table-hover mt-2">
                                <thead class="bg-black text-white">
                                    <tr>
                                        <th>FacturaId</th>
                                        <th>Monto/Pagado</th>
                                        <th>ObservaciÃ³n</th>
                                        <th>Fecha</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var pago in PagosFacturaSeleccionada)
                                    {
                                        <tr>
                                            <td>@pago.FacturaID</td>
                                            <td>$@pago.MontoPagado.ToString("N2")</td>
                                            <td>@pago.Observacion</td>
                                            <td>@pago.Fecha.ToShortDateString()</td>
                                        </tr>
                                    } 
                                </tbody>
                            </table>
                        }
                    </div>
                    <div class="modal-footer bg-dark text-white d-print-none">
                        <div class="btn-group">
                            <input type="number" @bind-value="@PaiedMoney">
                            <button type="submit" class="btn btn-primary" @onclick="async()=>{await FormPago();}">Agregar Pago</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="modal" style="display: @(formPago ? "block" : "none"); background-color: rgba(0, 0, 0, 0.5);" tabindex="-1" role="dialog">
            <div class="modal-dialog " role="document">
                <div class="modal-content" style="width: 600px;">
                    <div class="modal-header bg-dark text-white d-print-none">
                        <h5 class="modal-title"><b>@TituloFormPago</b></h5>
                        <button type="button" class="close btn btn-danger" data-dismiss="modal" aria-label="Close" @onclick="CloseFormPago">
                            <span aria-hidden="true" class="oi oi-x"></span>
                        </button>
                    </div>

                    <EditForm Model="pagoRequest" OnValidSubmit="SendPago">
                        <div class="modal-body">
                            <div class="alert alert-warning text-dark mt-2" role="alert" style="display: @(string.IsNullOrEmpty(ErrorMessage) ? "none" : "block")">
                                <strong>@ErrorMessage</strong> 
                            </div>

                            <div class="form-group input-group d-print-none mb-3">
                                <span class="input-group-text bg-white text-black">
                                    <span class="oi oi-calendar"></span>
                                </span>
                                <input type="date" class="form-control" placeholder="Fecha" 
                                @bind-value="pagoRequest.Fecha" readonly/>
                            </div>
                            
                            <div class="form-group input-group mb-3 d-print-none">
                                <span class="input-group-text bg-white text-black ">
                                    <span class="oi oi-code"></span>
                                </span>
                                <input type="text" class="form-control" placeholder="Codigo"
                                @bind-value="pagoRequest.FacturaID" readonly />
                            </div>

                            <div class="form-group input-group mb-3 d-print-none">
                                <span class="input-group-text bg-white text-black">
                                    <span class="oi oi-align-left"></span>
                                </span>
                                <select class="form-select" @bind="@pagoRequest.Observacion" required>
                                    <option disabled selected value="">ObservaciÃ³n</option>
                                    <option value="Justo ðŸ˜‰">Justo ðŸ˜‰</option>
                                    <option value="Antes ðŸ˜Ž">Antes ðŸ˜Ž</option>
                                    <option value="Atrazado ðŸ˜´">Atrazado ðŸ˜´</option>
                                </select>
                            </div>

                            <div class="card">
                                <div class="card-header">
                                    <div class="row">
                                        <div class="col">
                                            <h5><b>Pago de la factura NÂº: @InvoiceId</b></h5>
                                        </div>
                                        <div class="col text-end">
                                            <div class="input-group">
                                                <label class="input-group-text"><strong>@Fecha.ToLongDateString()</strong></label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col input-group">
                                            <label class="form-control">
                                                <strong>Cliente</strong>
                                            </label>
                                            <label class="form-control">
                                                <strong>ObservaciÃ³n</strong>
                                            </label>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col input-group">
                                            <span class="form-control">
                                                @CustomerName
                                            </span>
                                            <span class="form-control">
                                                @pagoRequest.Observacion
                                            </span>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col input-group">
                                            <label class="form-control">
                                                <strong>Pagado</strong>
                                            </label>
                                            <label class="form-control">
                                                <strong>Pendiente</strong>
                                            </label>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col input-group">
                                            <span class="form-control">
                                                $@pagoRequest.MontoPagado.ToString("N2")
                                            </span>
                                                @if(Pending > 0)
                                                {
                                                    <span class="form-control">
                                                        -$@Pending.ToString("N2")
                                                    </span>  
                                                }
                                                else
                                                {
                                                <span class="form-control">
                                                        $@Pending.ToString("N2")
                                                    </span>  
                                                }
                                        </div>
                                    </div>
                                </div>

                            </div>
                            
                        </div>

                        <div class="modal-footer bg-dark text-white d-print-none">
                            <div class="btn-group">
                                <button type="submit" class="btn btn-success" @onclick="async ()=>{ await PrintPageAsync();}">Pagar</button>
                                <button type="button" class="btn btn-secondary" @onclick="CloseFormPago">Cerrar</button>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>

        <!-- Mostrar la lista de facturas -->
        <div class="table-container">
            <div class="card col-12">
                <div class="card-body">
                    <div class="row">
                        <div class="col-11">
                            <button class="btn btn-outline-primary d-print-none" 
                                @onclick="async ()=>{await PrintPageAsync();}">
                                <span class="oi oi-print"></span>
                            </button>
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col-8"></div>
                        <div class="col-4">
                            <div class="input-group d-print-none">
                                <input type="text" class="form-control border-0 border-bottom" 
                                    placeholder="Buscar por nombre" @bind="FiltroInvoice">
                                <button class="btn btn-outline input-group-text border-0 bg-white" 
                                    type="button" id="button-addon2" @onclick="()=>Consultar()">
                                    <span class="oi oi-magnifying-glass text-black"></span>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="row-12 mt-2">
                        <table class="table table-striped">
                            <thead class="bg-black text-white">
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Cliente</th>
                                    <th scope="col">Total</th>
                                    <th scope="col">ITBIS</th>
                                    <th scope="col">Descuento</th>
                                    <th scope="col">Importe</th>
                                    <th scope="col">Pendiente</th>
                                    <th scope="col">Fecha</th>
                                    <th scope="col" class="d-print-none">...</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var f in Facturas)
                                {
                                    
                                    @if(f.TypePayment == "2")    
                                    {
                                        <tr>
                                            <th scope="row">@f.Id</th>
                                            <td>@f.Cliente.Nombre @f.Cliente.Apellidos</td>
                                            <td>$@($"{(f.SubTotal - f.ITBIS):N2}")</td>
                                            <td>
                                                <span style="white-space: nowrap;">
                                                    $@($"{(f.ITBIS):N2}")
                                                </span>
                                            </td>
                                            <td>$@f.TotalDesc.ToString("N2")</td>
                                            <td>$@($"{(f.SubTotal - f.TotalDesc):N2}")</td>
                                            <td><strong>-$@f.SaldoPendiente.ToString("N2")</strong></td>
                                            <td>@f.Fecha.ToShortDateString()</td>
                                            <td>
                                                <div class="button d-print-none">
                                                    @if (f.SaldoPendiente > 0)
                                                    {
                                                        <button @onclick="() => MostrarPagos(f)"
                                                            class="btn btn-outline-success me-1">
                                                            <span class="oi oi-dollar"></span>
                                                        </button>
                                                    
                                                    }
                                                    <button @onclick="()=>Seleccionar(f.Id, f)" class="btn btn-outline-primary">
                                                        <span class="oi oi-info"></span>
                                                    </button>
                                                    @if(Role=="Admin")
                                                    {
                                                        <button @onclick="() => Eliminar(f)" class="btn btn-outline-danger d-print-none" >
                                                            <span class="oi oi-trash"></span>
                                                        </button>
                                                    }
                                                    else
                                                    {
                                                       <button class="btn btn-outline-danger d-print-none ms-1" >
                                                            <span class="oi oi-lock-locked"></span>
                                                        </button> 
                                                    }
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    }

}

@code
{
    public DateTime? fechaFiltro { get; set; }
    public string TituloForm => ShowDetails == false ?
    "MÃ³dulo de facturas a crÃ©dito" : "MÃ³dulo de facturaciÃ³n";
    public bool ShowDetails { get; set; } = false;
    public bool ShowDetailPayment { get; set; } = false;
    public List<FacturaResponse> Facturas { get; set; } = new();
    public List<FacturaDetalleResponse> FacturaDetalles { get; set; } = new();
    public FacturaResponse? SelectedFactura { get; set; } // Factura seleccionada

    private string FormatPhoneNumber(string phoneNumber)
    {
        // Verifica si el nÃºmero telefÃ³nico tiene la longitud esperada
        if (phoneNumber.Length == 10)
        {
            // Formatea el nÃºmero telefÃ³nico
            return $"({phoneNumber.Substring(0, 3)}) {phoneNumber.Substring(3, 3)}-{phoneNumber.Substring(6)}";
        }
        else
        {
            // Devuelve el nÃºmero telefÃ³nico sin cambios si no tiene la longitud esperada
            return phoneNumber;
        }
    }
    private string FormatCustomerId(string customerId)
    {
        // Verifica si el nÃºmero telefÃ³nico tiene la longitud esperada
        if (customerId.Length == 11)
        {
            // Formatea el nÃºmero telefÃ³nico
            return $"{customerId.Substring(0, 3)}-{customerId.Substring(3, 7)}-{customerId.Substring(10)}";
        }
        else
        {
            // Devuelve el nÃºmero telefÃ³nico sin cambios si no tiene la longitud esperada
            return customerId;
        }
    }
    void Back2()
    {
        Form = false;
        Precio = 0;
    }
    async Task Consultar()
    {
        var resultado = await facturaServices.Consultar(FiltroInvoice);
        if (resultado.Success)
        {
            Facturas = resultado.Data?.OrderByDescending(f => f.Fecha)
            .ToList() ?? new List<FacturaResponse>();
        }
        StateHasChanged();
    }

    public string Role { get; set; } = "";
    protected override async Task OnInitializedAsync()
    {
        await Consultar();
        await Consultar2();
        await CargarContacto();
        await CargarProducto();
        await CargarPagos();

        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        var userRoleClaim = user.FindFirst(ClaimTypes.Role);
        if (userRoleClaim != null)
        {
            Role = userRoleClaim.Value;
        }
    }

    public void Seleccionar(int Id, FacturaResponse factura)
    {
        Form = true;
        facturaRequest = Facturas
        .Where(c => c.Id == Id)
        .Select(c => c.ToRequest())
        .FirstOrDefault() ?? new FacturaRequest();

        PagosFacturaSeleccionada = Pagos.Where(p => p.FacturaID == factura.Id).ToList();
        facturaRequest.DineroPagado = 
        facturaRequest.SaldoPagado +
        PagosFacturaSeleccionada
        .Sum(c => (decimal)c.MontoPagado);

        // Load the Descuento information for each detail in the selected factura
        foreach (var detalle in facturaRequest.Detalles)
        {
            detalle.Descuento = factura.Detalles
                .Where(d => d.Id == detalle.Id)
                .Select(d => d.Descuento)
                .FirstOrDefault();
        }
    }

    public async Task Eliminar(FacturaResponse user)
    {
        var resultado = await facturaServices.Eliminar(user.ToRequest());
        if (resultado.Success)
        {
            await Consultar();
            StateHasChanged();
        }
    }
    private async Task PrintPageAsync()
    {
        // Llama a la funciÃ³n JavaScript para imprimir la pÃ¡gina
        await JSRuntime.InvokeVoidAsync("printPage");
    }

    //Codigo para el formulario de pago
   public string TituloFormPago => pagoRequest.Id == 0 ? 
    "Agregar Pago" : "Modificar Pago";
    public string Filtro { get; set; } = "";
    public string FiltroInvoice { get; set; } = "";
    public bool formPago { get; set; } = false;
    public List<PagoResponse> Pagos { get; set; } = new();
    public PagoRequest pagoRequest { get; set; } = new();
    async Task CargarPagos()
    {
        var resultado =
        await pagoServices.Consultar(Filtro);
        if (resultado.Success)
        {
            Pagos = resultado.Data!;
        }
    }
    bool MostrarErrorSeleccion { get; set; } = false;
    public string? ErrorMessage { get; set; } = null;

    async Task FormPago()
    {
        if (PaiedMoney < 1)
        {
            ErrorMessage = "El monto a pagar no puede ser $0";
            return;
        }
        if (PaiedMoney > SelectedFactura.SaldoPendiente)
        {
            ErrorMessage = "El monto a pagar no puede ser mayor al saldo pendiente $" + SelectedFactura.SaldoPendiente.ToString("N2");
            return;
        }
        ErrorMessage = null;
        formPago = true;
        detailsPago = false;
        pagoRequest.FacturaID = InvoiceId;
        await Money();

    }
    void CloseFormPago()
    {
        pagoRequest  = new PagoRequest();
        detailsPago = true;
        formPago = false;
        DetallesPago = false;
        CloseMoney();
    } 
    void Cancelar()
    {
        pagoRequest  = new PagoRequest();
        formPago = false;
    }
    
    public async Task SendPago()
    {
        pagoRequest.Fecha = DateTime.Now;
        pagoRequest.MontoPagado = Convert.ToDouble(PaiedMoney);
        if (pagoRequest.Id == 0)
        {
            // Debo registrar el contacto..
            var r = await pagoServices.Crear(pagoRequest);
            if (r.Success)
            {
                Cancelar();
                CloseMoney();
                await CargarPagos();
                await Consultar();
                StateHasChanged();
            }
        }
    }

    //Codigo Para mostrar todos los pagos realizados por factura
    public bool detailsPago { get; set; } = false;
    void DetailsPago()
    {
        detailsPago = true;
    }
    void CloseDetailsPago()
    {
        detailsPago = false;
        ErrorMessage = null;
    } 

    public List<PagoResponse> PagosFacturaSeleccionada { get; set; } = new();
    public bool FacturaSinPagos => PagosFacturaSeleccionada.Count == 0;
    public bool MostrarMensajeSinPagos { get; set; } = false;
    public bool DetallesPago { get; set; } = false;
    string CustomerName = "";
    int InvoiceId = 0;
    public static decimal PendingMoney = 0;
    public decimal PaiedMoney = 0;
    public decimal Pending = 0;

    async Task Money()
    {
        ErrorMessage = null;
        pagoRequest.MontoPagado = Convert.ToDouble(PaiedMoney);
        Pending = PendingMoney - PaiedMoney;
        
    }
    void CloseMoney()
    {
        ErrorMessage = null;
        DetallesPago = false;
        PaiedMoney = 0;
        Pending = 0;
    }

    DateTime Fecha;
    DateTime FechaPago;
    void MostrarPagos(FacturaResponse factura)
    {
        SelectedFactura = factura;
        FacturaDetalles = factura.Detalles.ToList();
        PagosFacturaSeleccionada = Pagos.Where(p => p.FacturaID == factura.Id).ToList();
        detailsPago = true;
        StateHasChanged(); // AsegÃºrate de llamar a StateHasChanged para actualizar la interfaz de usuario.

        // Establecer FacturaID en pagoRequest con el Id de la factura seleccionada
        PendingMoney = SelectedFactura.SaldoPendiente;
        CustomerName = SelectedFactura.Cliente.Nombre +" "+ SelectedFactura.Cliente.Apellidos;
        InvoiceId = SelectedFactura.Id;
        Fecha = SelectedFactura.Fecha;

        // Obtener la Ãºltima fecha de pago
        if (PagosFacturaSeleccionada.Any())
        {
            FechaPago = PagosFacturaSeleccionada.Max(p => p.Fecha);
        }
        else
        {
            // Manejar el caso donde la lista estÃ¡ vacÃ­a
            // Puedes asignar un valor predeterminado a FechaPago o realizar cualquier otra acciÃ³n adecuada.
        }
    }

    //De aqui en adelante es para controlar la ediccion de la factura
    public bool Chance { get; set; } = false;
    public bool Info { get; set; } = false;
    public bool Form { get; set; } = false;
    public string? Message { get; set; } = null;
    public string Nombre { get; set; } = string.Empty;
    public string ItemName { get; set; } = string.Empty;
    public List<ClienteResponse> Contactos { get; set; } = new();
    public List<ProductoResponse> Productos { get; set; } = new List<ProductoResponse>();
    public FacturaRequest facturaRequest { get; set; } = new();
    public FacturaDetalleRequest detalleFacturaRequest { get; set; } = new();
    public decimal Precio { get; set; } = 0;
    public int Cantidad { get; set; } = 1;
    public int IdProducto { get; set; } = 0;
    void BuscarPercio(int idProducto)
    {
        Precio = Productos.FirstOrDefault(p => p.Id == idProducto)!.Precio;
        IdProducto = idProducto;
    }
    void BuscarSeleccionarCliente(string Contacto)
    {
        var c = Contactos.FirstOrDefault(p => p.Nombre+" "+p.Apellidos == Contacto)!;
        if (c != null) facturaRequest.ClienteId = c.Id;
    }
    async Task Add(int Id){
        var detalle = facturaRequest.Detalles
        .FirstOrDefault(d => d.ProductoId == Id);
        var Cant = 1;
        var producto = Productos.FirstOrDefault(p => p.Id == Id);
        int NewStock = detalle.Cantidad + Cant;

        if (NewStock <= producto.Stock)
        {
            detalle.Cantidad += Cant;
            await productoServices.ActualizarStock(detalle.ProductoId, Cant);
            await Send();
            NewStock = 0;
        }
        else
        {
            Message = "No hay suficientes artÃ­culos en el stock. ðŸ˜¥";
            return;
        }
    }
    async Task Remove(int Id){
        var detalle = facturaRequest.Detalles
        .FirstOrDefault(d => d.ProductoId == Id);
        var Cant = 1;
        var producto = Productos.FirstOrDefault(p => p.Id == Id);
        int NewStock = detalle.Cantidad - Cant;

        if (NewStock >= 1)
        {
            detalle.Cantidad -= Cant;
            await Send();
            await productoServices.StockDevuelto(detalle.ProductoId, Cant);
            NewStock = 0;
        }
        else
        {
            Message = "Debes dejar al menos un articulo. ðŸ˜¥";
            return;
        }
    }
    async Task EliminarDetalle(int Id)
    {
        var detalle = facturaRequest.Detalles
        .FirstOrDefault(d => d.ProductoId == Id);
        // Actualizar el stock del producto en la base de datos
        await productoServices.StockDevuelto(detalle.ProductoId, detalle.Cantidad);
        if (detalle != null)
        {
            facturaRequest.Detalles.Remove(detalle);
        }
        await Send();
    }
    async Task AgregarAlDetalle()
    {
        if (detalleFacturaRequest.Descuento > 30)
        {
            Message = "ðŸ˜’ El decuento no puede ser mayor a 30%. ðŸ’°";
            return;
        }

        Message = null;
        var producto = Productos.FirstOrDefault(p => p.Id == IdProducto);

        if (producto != null)
        {
            var detalleExistente = facturaRequest.Detalles.FirstOrDefault(d => d.ProductoId == IdProducto);

            if (detalleExistente != null)
            {
                int nuevaCantidad = detalleExistente.Cantidad + Cantidad;

                if (nuevaCantidad <= producto.Stock)
                {
                    detalleExistente.Cantidad = nuevaCantidad;
                }
                else
                {
                    Message = "No hay suficientes artÃ­culos en el stock. ðŸ˜¥";
                    return;
                }
            }
            else
            {
                if (Cantidad <= producto.Stock)
                {
                    facturaRequest.Detalles.Add(new FacturaDetalleRequest
                    {
                        ProductoId = IdProducto,
                        Descripcion = producto.Nombre,
                        Precio = producto.Precio,
                        Cantidad = Cantidad,
                        Descuento = detalleFacturaRequest.Descuento
                    });
                    Cantidad = 1;
                }
                else
                {
                    Message = "No hay suficientes artÃ­culos en el stock. ðŸ˜¥";
                    return;
                }
            }

            // Actualizar el stock del producto en la base de datos
            await productoServices.ActualizarStock(IdProducto, Cantidad);

            await Send();
            Message = null;
        }
    }
   
   async Task CargarContacto()
    { 
        //Llenar la lista de contactos para mostrar al usuario...
        var r = await clienteServices.Consultar("");
        if (r.Success)
        {
            Contactos = r.Data!;
        }
    }
    async Task CargarProducto()
    { 
        //Llenar la lista de contactos para mostrar al usuario...
        var r = await productoServices.Consultar("");
        if (r.Success)
        {
            Productos = r.Data!;
        }
    }

    //Esto es para mostrar el Numero de la factura a registrar
    int ultimoIdFactura = 0;
    async Task Consultar2()
    {
        var resultado = await facturaServices.Consultar(Filtro);
        if (resultado.Success)
        {
            Facturas = resultado.Data?.OrderByDescending(f => f.Fecha).ToList() ?? new List<FacturaResponse>();

            // Obtener el Id de la Ãºltima factura registrada + 1
            ultimoIdFactura = Facturas.FirstOrDefault()?.Id + 1 ?? 1;
        }
        StateHasChanged();
    }

    
   
    public string TypePayment {get; set;} = string.Empty;
    async Task Send()
    {
        if (facturaRequest.SaldoPagado > facturaRequest.SaldoPagado - facturaRequest.TotalDesc 
            && facturaRequest.TypePayment == "2")
        {
            Pendiente();

            return;
        }
        
        BuscarSeleccionarCliente(Nombre);

        var result = await facturaServices.Modificar(facturaRequest);
        Message = null;

        await Consultar();
        Precio = 0;
        
    }

    public decimal Cambio = 0;
    public decimal MontoPagado = 0;
    public decimal SaldoPendiente = 0;
    public decimal Total = 0;
    void CalcularCambio()
    {
        if(facturaRequest.SaldoPagado < facturaRequest.SubTotal - facturaRequest.TotalDesc &&  facturaRequest.TypePayment == "1")
        {
            Message = "ðŸ˜’ El monto pagado no puede ser menor al importe de la factura ðŸ’°";
            return;
        }
        if (facturaRequest.Detalles.Count == 0)
        {
            Message = "ðŸ˜’ Debes agregar al menos un producto al detalle. ðŸ›’";
            return;
        }

        if (string.IsNullOrEmpty(facturaRequest.TypePayment))
        {
            Message = "ðŸ˜’ Debes seleccionar el tipo de venta. ðŸ’°";
            return;
        }

        if (facturaRequest.TypePayment == "2")
        {
            Info = true;
        }

        Chance = true;
        MontoPagado = facturaRequest.SaldoPagado;
        Total = facturaRequest.SubTotal - facturaRequest.TotalDesc;
        Cambio = MontoPagado - Total;
        Message = null;
    }
    void Pendiente()
    {
        if(facturaRequest.TypePayment=="2")
        {
            if(MontoPagado >= Total){
                Message = "El monto pagado no puede ser mayor o igual al total ðŸ˜¢";
                return;
            }
        }
        Chance = true;
        MontoPagado = facturaRequest.SaldoPagado;
        Total = facturaRequest.SubTotal - facturaRequest.TotalDesc;
        Cambio = MontoPagado - Total;
        SaldoPendiente = Total - MontoPagado;
        Message = null;
    }
}