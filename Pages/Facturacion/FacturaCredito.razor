@page "/factura/cobrar"
@using FactuSystem.Data.Response;
@inject IJSRuntime JSRuntime;
@attribute [Authorize]

@if(!ShowDetails)
{
    <div class="row mb-3 d-print-none">
        <div class="col-md-3 form-group">
            <div class="input-group">
                <input type="date" class="form-control" @bind="fechaFiltro">
                <button @onclick="async ()=>{await BuscarFacturas();}" class="btn btn-outline-primary">
                    <span class="oi oi-magnifying-glass"></span>
                </button>
            </div>
        </div>
        <div class="col-md-3">
            <button class="btn btn-outline-primary d-print-none" 
                @onclick="async ()=>{await PrintPageAsync();}">
                <span class="oi oi-print"></span>
            </button>
        </div>
    </div>

    <div class="modal" style="display: @(formPago ? "block" : "none"); background-color: rgba(0, 0, 0, 0.5);" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><b>@TituloFormPago</b></h5>
                    <button type="button" class="close btn btn-outline-danger" data-dismiss="modal" aria-label="Close" @onclick="CloseFormPago">
                        <span aria-hidden="true" class="oi oi-x"></span>
                    </button>
                </div>

                <EditForm Model="pagoRequest" OnValidSubmit="SendPago">
                    <div class="alert alert-danger mt-3" role="alert" style="display: @(string.IsNullOrEmpty(ErrorMessage) ? "none" : "block")">
                        @ErrorMessage 
                    </div>
                    <div class="modal-body">
                        <div class="form-group input-group mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text bg-white text-black border-0">
                                    <span class="oi oi-code"></span>
                                </span>
                            </div>
                            <input type="text" class="form-control" placeholder="Codigo"
                             @bind-value="pagoRequest.FacturaID" readonly />
                        </div>
                        
                        <div class="form-group input-group mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text bg-white text-black border-0">
                                    <span class="oi oi-dollar"></span>
                                </span>
                            </div>
                            <input type="number" class="form-control" placeholder="Monto a Pagar" 
                            @bind-value="pagoRequest.MontoPagado" required min="0.01" step="0.01"/>
                        </div>
                        <div class="form-group input-group mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text bg-white text-black border-0">
                                    <span class="oi oi-align-left"></span>
                                </span>
                            </div>
                            <select class="form-control" @bind="@pagoRequest.Observacion" required>
                                <option disabled selected value="">ObservaciÃ³n</option>
                                <option value="Justo ðŸ˜‰">Justo ðŸ˜‰</option>
                                <option value="Temprano ðŸ˜Ž">Temprano ðŸ˜Ž</option>
                                <option value="Atrazado ðŸ˜´">Atrazado ðŸ˜´</option>
                            </select>
                        </div>
                        <div class="form-group input-group mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text bg-white text-black border-0">
                                    <span class="oi oi-calendar"></span>
                                </span>
                            </div>
                            <input type="date" class="form-control" placeholder="Fecha" 
                            @bind-value="pagoRequest.Fecha" readonly/>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <div class="btn-group">
                            <button type="submit" class="btn btn-outline-success">Registrar Pago</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col-10">
            <h3 class="card-title"><b>@TituloForm</b></h3>
        </div>
        <div class="col-2">
            <button class="btn btn-outline-danger d-print-none"
                @onclick="Back">
                <span class="oi oi-arrow-left"></span>
            </button>
            <button class="btn btn-outline-primary d-print-none" @onclick="PrintPageAsync">
                <span class="oi oi-print"></span>
            </button>
        </div>
    </div>
}
<hr>


@if(!ShowDetails)
{
    <div class="container">
        <h3 class="card-title"><b>@TituloForm</b></h3>
    </div>
}
<div class="container">
    @if(ShowDetails)
    {
        <h5><b>Fecha:</b> @SelectedFactura.Fecha.ToShortDateString()</h5>
        <h5><b>Cliente:</b> @SelectedFactura.Cliente.Nombre @SelectedFactura.Cliente.Apellidos</h5>
        <details class="d-print-none">
            <small><strong>Cedula:</strong>@FormatCustomerId(SelectedFactura.Cliente.Cedula)</small>
            <small><strong>Celular:</strong>@FormatPhoneNumber(SelectedFactura.Cliente.Telefono)</small>
            <small><strong>DirecciÃ³n:</strong>@SelectedFactura.Cliente.Direccion</small>
        </details>
        <!-- Mostrar detalles de la factura seleccionada -->
        <div>
            <table class="table table-bordered table-striped">
                <thead class="table" style="background-image: linear-gradient(180deg, rgb(0, 29, 82) 0%, rgb(0, 0, 0) 70%); color: #ffffff;">
                    <tr>
                        <th scope="col">Cantidad</th>
                        <th scope="col">DescripciÃ³n</th>
                        <th scope="col">Precio</th>
                        <th scope="col">ITBIS</th>
                        <th scope="col">Descuento</th>
                        <th scope="col">Importe</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var detalle in FacturaDetalles)
                    {
                        <tr>
                            <td>@detalle.Cantidad</td>
                            <td>@detalle.Producto.Nombre</td>
                            <td>$@($"{(detalle.Precio - detalle.PrecioITBIS):N2}")</td>
                            <td>
                                <span style="white-space: nowrap;">
                                    $@($"{(detalle.PrecioITBIS):N2}")
                                </span>
                            </td>
                            <td>$@detalle.TotalDesc.ToString("N2")</td>
                            <td>$@($"{(detalle.SubTotal - detalle.TotalDesc):N2}")</td>
                        </tr>
                    }
                    <tr>
                        <td colspan="4"></td>
                        <td><b>SubTotal:</b></td>
                        <td>$@FacturaDetalles.Sum(c => c.SubTotal - c.ITBIS).ToString("N2")</td>
                    </tr>
                    <tr>
                        <td colspan="4"></td>
                        <td><b>ITBIS:</b></td>
                        <td>$@FacturaDetalles.Sum(c => c.ITBIS).ToString("N2")</td>
                    </tr>
                    <tr>
                        <td colspan="4"></td>
                        <td><b>Descuento:</b></td>
                        <td>$@FacturaDetalles.Sum(c => c.TotalDesc).ToString("N2")</td>
                    </tr>
                    <tr>
                        <td colspan="4"></td>
                        <td><b>Total:</b></td>
                        <td><strong>$@FacturaDetalles.Sum(c => c.SubTotal - c.TotalDesc).ToString("N2")</strong></td>
                    </tr>
                    <tr>
                        <td colspan="4"></td>
                        <td><b>Pagado:</b></td>
                        <td>$@SelectedFactura.DineroPagado.ToString("N2")</td>
                    </tr>
                    <tr>
                        <td colspan="4"></td>
                        <td><b>Pendiente:</b></td>
                        <td><strong>$@SelectedFactura.SaldoPendiente.ToString("N2")</strong></td>
                    </tr>
                </tbody>
            </table>
        </div>
    }
    else if(Facturas != null)
    {
        <div class="modal" style="display: @(detailsPago ? "block" : "none"); background-color: rgba(0, 0, 0, 0.5);" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title"><b>Detalles de los Pagos</b></h5>
                        <button type="button" class="close btn btn-outline-danger" data-dismiss="modal" aria-label="Close" @onclick="CloseDetailsPago">
                            <span aria-hidden="true" class="oi oi-x"></span>
                        </button>
                    </div>
                    <div class="modal-body">
                        @if(FacturaSinPagos)
                        {
                            <div class="alert alert-warning" role="alert">
                                <h4 class="alert-heading">Â¡Aviso!</h4>
                                <p>Este cliente aÃºn no ha realizado pagos.</p>
                                <hr>
                                <p class="mb-0">Por favor, asegÃºrese de coordinar con el cliente para procesar los pagos pendientes. Â¡Gracias!</p>
                            </div>
                        }
                        else{
                            <table class="table table-hover">
                                <thead class="table" style="background-image: linear-gradient(180deg, rgb(0, 29, 82) 0%, rgb(0, 0, 0) 70%); color: #ffffff;">
                                    <tr>
                                        <th>FacturaId</th>
                                        <th>Monto/Pagado</th>
                                        <th>ObservaciÃ³n</th>
                                        <th>Fecha</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var pago in PagosFacturaSeleccionada)
                                    {
                                        <tr>
                                            <td>@pago.FacturaID</td>
                                            <td>$@pago.MontoPagado.ToString("N2")</td>
                                            <td>@pago.Observacion</td>
                                            <td>@pago.Fecha</td>
                                        </tr>
                                    } 
                                </tbody>
                            </table>
                        }
                    </div>
                    <div class="modal-footer">
                        <div class="btn-group">
                            <button type="submit" class="btn btn-outline-primary" @onclick="FormPago">Agregar Pago</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Mostrar la lista de facturas -->
        <table class="table table-striped">
            <thead class="table" style="background-image: linear-gradient(180deg, rgb(0, 29, 82) 0%, rgb(0, 0, 0) 70%); color: #ffffff;">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Cliente</th>
                    <th scope="col">Total</th>
                    <th scope="col">ITBIS</th>
                    <th scope="col">Descuento</th>
                    <th scope="col">Importe</th>
                    <th scope="col">Pendiente</th>
                    <th scope="col">Fecha</th>
                    <th scope="col">...</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var f in Facturas)
                {
                    
                    @if(f.TypePayment == "2" && f.SaldoPendiente > 0)    
                    {
                        <tr>
                            <th scope="row">@f.Id</th>
                            <td>@f.Cliente.Nombre @f.Cliente.Apellidos</td>
                            <td>$@($"{(f.SubTotal - f.ITBIS):N2}")</td>
                            <td>
                                <span style="white-space: nowrap;">
                                    $@($"{(f.ITBIS):N2}")
                                </span>
                            </td>
                            <td>$@f.TotalDesc.ToString("N2")</td>
                            <td>$@($"{(f.SubTotal - f.TotalDesc):N2}")</td>
                            <td><strong>$@f.SaldoPendiente.ToString("N2")</strong></td>
                            <td>@f.Fecha.ToShortDateString()</td>
                            <td>
                                <div class="button d-print-none">
                                    <button @onclick="() => MostrarPagos(f)"
                                        class="btn btn-outline-success">
                                        <span class="oi oi-dollar"></span>
                                    </button>
                                    <button @onclick="() => MostrarDetalles(f)"
                                        class="btn btn-outline-info">
                                        <span class="oi oi-info"></span>
                                    </button>
                                    <button @onclick="() => Eliminar(f)" class="btn btn-outline-danger d-print-none" >
                                        <span class="oi oi-trash"></span>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
</div>

@code
{
    public DateTime? fechaFiltro { get; set; }
    public string TituloForm => ShowDetails == false ?
    "MÃ³dulo de facturas a crÃ©dito" : "MÃ³dulo de facturaciÃ³n";
    public bool ShowDetails { get; set; } = false;
    public bool ShowDetailPayment { get; set; } = false;
    public List<FacturaResponse> Facturas { get; set; } = new();
    public List<FacturaDetalleResponse> FacturaDetalles { get; set; } = new();
    public FacturaResponse? SelectedFactura { get; set; } // Factura seleccionada
    
    private async Task BuscarFacturas()
    {
        try
        {
            var resultado = await facturaServices.BuscarFacturas(fechaFiltro);
            if (resultado.Success)
            {
                Facturas = resultado.Data ?? new List<FacturaResponse>();
            }
            else
            {
                // Log the error or display an error message
                Console.WriteLine($"Error: {resultado.Message}");
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Log the exception or display an error message
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }

    private string FormatPhoneNumber(string phoneNumber)
    {
        // Verifica si el nÃºmero telefÃ³nico tiene la longitud esperada
        if (phoneNumber.Length == 10)
        {
            // Formatea el nÃºmero telefÃ³nico
            return $"({phoneNumber.Substring(0, 3)}) {phoneNumber.Substring(3, 3)}-{phoneNumber.Substring(6)}";
        }
        else
        {
            // Devuelve el nÃºmero telefÃ³nico sin cambios si no tiene la longitud esperada
            return phoneNumber;
        }
    }
    private string FormatCustomerId(string customerId)
    {
        // Verifica si el nÃºmero telefÃ³nico tiene la longitud esperada
        if (customerId.Length == 11)
        {
            // Formatea el nÃºmero telefÃ³nico
            return $"{customerId.Substring(0, 3)}-{customerId.Substring(3, 7)}-{customerId.Substring(10)}";
        }
        else
        {
            // Devuelve el nÃºmero telefÃ³nico sin cambios si no tiene la longitud esperada
            return customerId;
        }
    }

    void Back()
    {
        ShowDetails = false;
    }
     async Task Consultar()
    {
        var resultado = await facturaServices.Consultar();
        if (resultado.Success)
        {
            Facturas = resultado.Data?.OrderByDescending(f => f.Fecha).ToList() ?? new List<FacturaResponse>();
        }
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        await Consultar();
        await CargarPagos();
    }

    public async Task Eliminar(FacturaResponse user)
    {
        var resultado = await facturaServices.Eliminar(user.ToRequest());
        if (resultado.Success)
        {
            await Consultar();
            StateHasChanged();
        }
    }
    // MÃ©todo para mostrar detalles de la factura seleccionada
    void MostrarDetalles(FacturaResponse factura)
    {
        SelectedFactura = factura;
        FacturaDetalles = factura.Detalles.ToList();
        ShowDetails = true;
    }
    private async Task PrintPageAsync()
    {
        // Llama a la funciÃ³n JavaScript para imprimir la pÃ¡gina
        await JSRuntime.InvokeVoidAsync("printPage");
    }

    //Codigo para el formulario de pago
   public string TituloFormPago => pagoRequest.Id == 0 ? 
    "Agregar Pago" : "Modificar Pago";
    public string Filtro { get; set; } = "";
    public bool formPago { get; set; } = false;
    public List<PagoResponse> Pagos { get; set; } = new();
    public PagoRequest pagoRequest { get; set; } = new();
    public FacturaRequest facturaRequest { get; set; } = new();
    async Task CargarPagos()
    {
        var resultado =
        await pagoServices.Consultar(Filtro);
        if (resultado.Success)
        {
            Pagos = resultado.Data!;
        }
    }
    bool MostrarErrorSeleccion { get; set; } = false;
    public string? ErrorMessage { get; set; } = null;

    void FormPago()
    {
        formPago = true;
        detailsPago = false;
        //pagoRequest.FacturaID = SelectedFactura.Id;
    }
    void CloseFormPago()
    {
        pagoRequest  = new PagoRequest();
        detailsPago = true;
        formPago = false;
    } 
    void Cancelar()
    {
        pagoRequest  = new PagoRequest();
        formPago = false;
    }
    public void SeleccionarPago(int Id)
    {
        formPago = true;
        pagoRequest = Pagos
        .Where(c => c.Id == Id)
        .Select(c => c.ToRequest())
        .FirstOrDefault() ?? new PagoRequest();
    }
    public async Task EliminarPago(PagoResponse item)
    {
        var resultado = await pagoServices.Eliminar(item.ToRequest());
        if (resultado.Success)
        {
            await CargarPagos();
            StateHasChanged();
        }
    }
    public async Task SendPago()
    {
        if (Convert.ToDecimal(pagoRequest.MontoPagado) > SelectedFactura.SaldoPendiente)
        {
            ErrorMessage = "El monto a pagar no puede ser mayor al saldo pendiente $" + SelectedFactura.SaldoPendiente.ToString("N2");
            return;
        }
        if (pagoRequest.Id == 0)
        {
            // Debo registrar el contacto..
            var r = await pagoServices.Crear(pagoRequest);
            if (r.Success)
            {
                if (Convert.ToDecimal(pagoRequest.MontoPagado) == SelectedFactura.SaldoPendiente)
                {
                    var invoice = await facturaServices.UpdateInvoice(pagoRequest.FacturaID);
                }
                Cancelar();
                await CargarPagos();
                await Consultar();
                StateHasChanged();
            }
        }
    }

    //Codigo Para mostrar todos los pagos realizados por factura
    public bool detailsPago { get; set; } = false;
    void DetailsPago()
    {
        detailsPago = true;
    }
    void CloseDetailsPago()
    {
        detailsPago = false;
    } 

    public List<PagoResponse> PagosFacturaSeleccionada { get; set; } = new List<PagoResponse>();
    public bool FacturaSinPagos => PagosFacturaSeleccionada.Count == 0;
    public bool MostrarMensajeSinPagos { get; set; } = false;

    void MostrarPagos(FacturaResponse factura)
    {
        SelectedFactura = factura;
        FacturaDetalles = factura.Detalles.ToList();
        PagosFacturaSeleccionada = Pagos.Where(p => p.FacturaID == factura.Id).ToList();
        detailsPago = true;
        StateHasChanged(); // AsegÃºrate de llamar a StateHasChanged para actualizar la interfaz de usuario.

        // Establecer FacturaID en pagoRequest con el Id de la factura seleccionada
        pagoRequest.FacturaID = SelectedFactura.Id;
    }

}