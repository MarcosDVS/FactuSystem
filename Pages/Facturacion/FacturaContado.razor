@page "/factura/paga"
@using FactuSystem.Data.Response;
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>Factura</PageTitle>

@if(!ShowDetails)
{
    <div class="row mb-3 d-print-none">
        <div class="col-md-3 form-group">
            <div class="input-group">
                <input type="date" class="form-control" @bind="fechaFiltro">
                <button @onclick="async ()=>{await BuscarFacturas();}" class="btn btn-outline-primary">
                    <span class="oi oi-magnifying-glass"></span>
                </button>
            </div>
        </div>
        <div class="col-md-3">
            <button class="btn btn-outline-primary d-print-none" @onclick="async ()=>{await PrintPageAsync();}">
                <span class="oi oi-print"></span>
            </button>
        </div>
        <div class="col-md-1">
                
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col-10">
            <h3 class="card-title"><b>@TituloForm</b></h3>
        </div>
        <div class="col-2">
            <button class="btn btn-outline-danger d-print-none"
                @onclick="Back">
                <span class="oi oi-arrow-left"></span>
            </button>
            <button class="btn btn-outline-primary d-print-none" @onclick="PrintPageAsync">
                <span class="oi oi-print"></span>
            </button>
        </div>
    </div>
}
<hr>
@if(!ShowDetails)
{
    <div class="container">
        <h3 class="card-title"><b>@TituloForm</b></h3>
    </div>
}
<div class="container">
    @if(ShowDetails)
    {
        <h5><b>Fecha:</b> @SelectedFactura.Fecha.ToShortDateString()</h5>
        <h5><b>Cliente:</b> @SelectedFactura.Cliente.Nombre @SelectedFactura.Cliente.Apellidos</h5>
        <!-- Mostrar detalles de la factura seleccionada -->
        <div class="table-responsive">
            <table class="table table-bordered">
                <thead class="table" style="background-color: rgb(0, 0, 53); color: #ffffff;">
                    <tr>
                        <th scope="col">Cantidad</th>
                        <th scope="col">Descripción</th>
                        <th scope="col">Precio sin ITEBIS</th>
                        <th scope="col">ITBIS</th>
                        <th scope="col">Descuento</th>
                        <th scope="col">Importe</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var detalle in FacturaDetalles)
                    {
                        <tr>
                            <td>@detalle.Cantidad</td>
                            <td>@detalle.Producto.Nombre</td>
                            <td>$@($"{(detalle.Precio - detalle.ITBIS):N2}")</td>
                            <td>
                                <span style="white-space: nowrap;">
                                    $@($"{(detalle.ITBIS):N2}")
                                </span>
                            </td>
                            <td>$@detalle.TotalDesc.ToString("N2")</td>
                            <td>$@($"{(detalle.SubTotal - detalle.TotalDesc):N2}")</td>
                        </tr>
                    }
                    <tr>
                        <td colspan="4"></td>
                        <td><b>SubTotal:</b></td>
                        <td>$@FacturaDetalles.Sum(c => c.Precio - c.ITBIS).ToString("N2")</td>
                    </tr>
                    <tr>
                        <td colspan="4"></td>
                        <td><b>ITBIS:</b></td>
                        <td>$@FacturaDetalles.Sum(c => c.ITBIS).ToString("N2")</td>
                    </tr>
                    <tr>
                        <td colspan="4"></td>
                        <td><b>Descuento:</b></td>
                        <td>$@FacturaDetalles.Sum(c => c.TotalDesc).ToString("N2")</td>
                    </tr>
                    <tr>
                        <td colspan="4"></td>
                        <td><b>Total:</b></td>
                        <td>$@FacturaDetalles.Sum(c => c.SubTotal - c.TotalDesc).ToString("N2")</td>
                    </tr>
                </tbody>
            </table>
        </div>
    }
    else if(Facturas != null)
    {
        <div class="modal" style="display: @(detailsPago ? "block" : "none"); background-color: rgba(0, 0, 0, 0.5);" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title"><b>Detalles de los Pagos</b></h5>
                        <button type="button" class="close btn btn-outline-danger" data-dismiss="modal" aria-label="Close" @onclick="CloseDetailsPago">
                            <span aria-hidden="true" class="oi oi-x"></span>
                        </button>
                    </div>
                    <div class="modal-body">
                        @if(FacturaSinPagos)
                        {
                            <div class="alert alert-success" role="alert">
                                <h4 class="alert-heading">¡Aviso!</h4>
                                <p>Este cliente pago al contado 😎.</p>
                                <hr>
                                <p class="mb-0">Por favor, asegúrese de conservar este cliente. ¡Gracias!
                                </p>
                            </div>
                        }
                        else{
                            <table class="table table-hover">
                                <thead class="table" style="background-color: rgb(0, 0, 53); color: #ffffff;">
                                    <tr>
                                        <th>FacturaId</th>
                                        <th>Monto/Pagado</th>
                                        <th>Observación</th>
                                        <th>Fecha</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var pago in PagosFacturaSeleccionada)
                                    {
                                        <tr>
                                            <td>@pago.FacturaID</td>
                                            <td>$ @pago.MontoPagado.ToString("N2")</td>
                                            <td>@pago.Observacion</td>
                                            <td>@pago.Fecha</td>
                                        </tr>
                                    } 
                                </tbody>
                            </table>
                        }
                    </div>
                    <div class="modal-footer">
                        
                    </div>
                </div>
            </div>
        </div>
        <!-- Mostrar la lista de facturas -->
        <table class="table table-striped">
            <thead class="table" style="background-color: rgb(0, 0, 53); color: #ffffff;">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Cliente</th>
                    <th scope="col">Total</th>
                    <th scope="col">ITBIS</th>
                    <th scope="col">Descuento</th>
                    <th scope="col">Importe</th>
                    <th scope="col">Fecha</th>
                    <th scope="col">...</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var f in Facturas)
                {
                    @if(f.TypePayment == "1" || f.SaldoPendiente == 0)    
                    {
                        <tr>
                            <th scope="row">@f.Id</th>
                            <td>@f.Cliente.Nombre @f.Cliente.Apellidos</td>
                            <td>$@($"{(f.SubTotal - f.ITBIS):N2}")</td>
                            <td>
                                <span style="white-space: nowrap;">
                                    $@($"{(f.ITBIS):N2}")
                                </span>
                            </td>
                            <td>$@f.TotalDesc.ToString("N2")</td>
                            <td>$@($"{(f.SubTotal - f.TotalDesc):N2}")</td>
                            <td>@f.Fecha.ToShortDateString()</td>
                            <td>
                                <div class="button d-print-none">
                                    <button @onclick="() => MostrarPagos(f)"
                                        class="btn btn-outline-success">
                                        <span class="oi oi-dollar"></span>
                                    </button>
                                    <button @onclick="() => MostrarDetalles(f)"
                                        class="btn btn-outline-info">
                                        <span class="oi oi-info"></span>
                                    </button>
                                    <button @onclick="() => Eliminar(f)" class="btn btn-outline-danger d-print-none" >
                                        <span class="oi oi-trash"></span>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
</div>

@code
{
    public DateTime? fechaFiltro { get; set; }
    public string TituloForm => ShowDetails == false ?
    "Módulo de facturas al contado" : "Módulo de facturación";
    public bool ShowDetails { get; set; } = false;
    public List<FacturaResponse> Facturas { get; set; } = new();
    public List<FacturaDetalleResponse> FacturaDetalles { get; set; } = new();
    public FacturaResponse? SelectedFactura { get; set; } // Factura seleccionada
    
    private async Task BuscarFacturas()
    {
        try
        {
            var resultado = await facturaServices.BuscarFacturas(fechaFiltro);
            if (resultado.Success)
            {
                Facturas = resultado.Data ?? new List<FacturaResponse>();
            }
            else
            {
                // Log the error or display an error message
                Console.WriteLine($"Error: {resultado.Message}");
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Log the exception or display an error message
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }



    void Back()
    {
        ShowDetails = false;
    }
    async Task Consultar()
    {
        var resultado = await facturaServices.Consultar();
        if (resultado.Success)
        {
            Facturas = resultado.Data?.OrderByDescending(f => f.Fecha).ToList() ?? new List<FacturaResponse>();
        }
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        await Consultar();
        await CargarPagos();
    }

    public async Task Eliminar(FacturaResponse user)
    {
        var resultado = await facturaServices.Eliminar(user.ToRequest());
        if (resultado.Success)
        {
            await Consultar();
            StateHasChanged();
        }
    }
    // Método para mostrar detalles de la factura seleccionada
    void MostrarDetalles(FacturaResponse factura)
    {
        SelectedFactura = factura;
        FacturaDetalles = factura.Detalles.ToList();
        ShowDetails = true;
    }
    private async Task PrintPageAsync()
    {

        await JSRuntime.InvokeVoidAsync("printPage");
    }
    
    //Codigo Para mostrar todos los pagos realizados por factura
    public List<PagoResponse> PagosFacturaSeleccionada { get; set; } = new List<PagoResponse>();
    public bool FacturaSinPagos => PagosFacturaSeleccionada.Count == 0;
    public bool MostrarMensajeSinPagos { get; set; } = false;
    public bool detailsPago { get; set; } = false;
    public List<PagoResponse> Pagos { get; set; } = new();
    public FacturaResponse FacturaEnConfirmacion { get; set; } = new();
    public string Filtro { get; set; } = "";
    async Task CargarPagos()
    {
        var resultado =
        await pagoServices.Consultar(Filtro);
        if (resultado.Success)
        {
            Pagos = resultado.Data!;
        }
    }
    void DetailsPago()
    {
        detailsPago = true;
    }
    void CloseDetailsPago()
    {
        detailsPago = false;
    } 
    void MostrarPagos(FacturaResponse factura)
    {
        SelectedFactura = factura;
        FacturaDetalles = factura.Detalles.ToList();
        PagosFacturaSeleccionada = Pagos.Where(p => p.FacturaID == factura.Id).ToList();
        detailsPago = true;
        StateHasChanged(); // Asegúrate de llamar a StateHasChanged para actualizar la interfaz de usuario.

    }
}