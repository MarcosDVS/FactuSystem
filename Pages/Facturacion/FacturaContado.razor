@page "/factura/paga"
@using FactuSystem.Data.Response;
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>Factura</PageTitle>

<style>
    /* Estilo para el contenedor de la tabla */
    .table-container {
        margin-top: 20px;
    }
    /* Estilo para el cuerpo de la tarjeta */
    .card-body {
        padding: 20px;
    }

    /* Estilo para centrar el texto en las celdas de la tabla */
    .table th, .table td {
        text-align: center;
    }

    .titulo {
        background-image: linear-gradient(180deg, rgb(0, 29, 82) 0%, rgb(0, 0, 0) 70%);
        color: #ffffff; /* Texto blanco */
        text-align: center; /* Centrar texto */
        padding: 10px; /* Añadir espacio alrededor del texto */
    }
</style>
<PageTitle>Yoja's Drinks & Heladeria Los Paso</PageTitle>
@if(Form)
{
    <EditForm Model="facturaRequest" OnValidSubmit="Send">
        @*Disenar el espacio para el cliente o contacto a facturarle*@
        <div class="input-group mb-3">
            <select class="form-control" @bind="@facturaRequest.ClienteId" required readonly>
                <option disabled selected>Cliente</option>
                @foreach (var contacto in Contactos)
                {
                    <option disabled value="@contacto.Id" >
                        @contacto.Nombre @contacto.Apellidos
                    </option>
                }
            </select>
            
            <button 
                class="btn btn-outline-danger d-print-none"
                type="button" id="button-addon2"
                @onclick="Back2">
                <span class="oi oi-arrow-thick-left"></span>
            </button>
        </div>

        @*Disenar el espacio para los productos a facturar*@
        <div class="card p-2 d-print-none">
            <div class="card-header card-title" style="background-image: linear-gradient(180deg, rgb(0, 29, 82) 0%, rgb(0, 0, 0) 70%); color: #ffffff;">
                <h5>¿Que desea el cliente?</h5>
            </div>
            <div class="input-group mb-3 mt-2">
                <input class="form-control"
                    placeholder="Producto"
                    aria-label="Producto"
                    aria-describedby="button-addon2" list="productos"
                    @onchange="(value)=>{
                        var r = Productos.FirstOrDefault(p=>p.CodigoDescripcion == value.Value!.ToString());
                        if(r!=null)
                        BuscarPercio(r.Id);
                        }"
                        />
                <datalist id="productos">
                    @foreach (var producto in Productos)
                    {
                        <option value="@producto.CodigoDescripcion" @onclick="()=>BuscarPercio(producto.Id)"></option>
                    }
                </datalist>
                
                <button class="btn btn-outline-primary d-print-none" 
                    @onclick="async ()=>{await PrintPageAsync();}">
                    <span class="oi oi-print"></span>
                </button>
                
            </div>
            <div class="input-group mb-3">
                <span class="form-control w-50">
                    $@Precio.ToString("N2")
                </span>
                <input class="form-control w-25" type="number" @bind="@Cantidad" />
                <button class="btn btn-success d-print-none"
                    type="button" id="button-addon2"
                    @onclick="async ()=>{await AgregarAlDetalle();}">
                    <span class="oi oi-collapse-down"></span>
                </button>
            </div>
            <div class="input-group mb-3">
                <label for="Descuento" class="input-group-text">Descuento:</label>
                <input @bind="detalleFacturaRequest.Descuento" type="number" 
                id="Descuento" placeholder="Descuento" class="form-control" />
            </div>
            @if (Message != null)
            {
                <div class="alert-warning">
                    <span class="text-dark">@Message</span>
                </div>
            }
        </div>

        
        @*Disenar los elementos que se cargan a la factura*@
        <h5 class="mt-1"><b>Detalle de la factura N°:</b> @facturaRequest.Id</h5>
        <table class="table table-hover">
            <thead style="background-image: linear-gradient(180deg, rgb(0, 29, 82) 0%, rgb(0, 0, 0) 70%); color: #ffffff;">
                <tr>
                    <th class="col w-25">
                        Cantidad
                    </th>
                    <th>Descripcion</th>
                    <th>Costo</th>
                    <th>ITBIS</th>
                    <th>Descuento</th>
                    <th>Total</th>
                    <th class="d-print-none">...</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var detalle in facturaRequest.Detalles)
                {
                    <tr>
                        <td class="col w-25 text-center">
                            <InputNumber 
                                class="form-control" 
                                @bind-Value="@detalle.Cantidad" readonly/>
                        </td>
                        <td class="col w-25">
                            @detalle.Descripcion
                        </td>
                        <td class="col w-25">
                            $@($"{(detalle.Precio - detalle.PrecioITBIS):N2}")
                        </td>
                        <td>
                            <span style="white-space: nowrap;">
                                $@($"{(detalle.PrecioITBIS):N2}")
                            </span>
                        </td>
                        <td class="col w-25">
                            <span style="white-space: nowrap;">
                                $@($"{(detalle.SubTotal * (detalle.Descuento / 100)):N2}")
                            </span>
                        </td>

                        <td class="col text-center">
                            $@detalle.SubTotal.ToString("N2")
                        </td>
                        <td>
                            <button type="button" class="btn btn-outline-danger d-print-none"
                                @onclick="()=>EliminarDetalle(detalle.ProductoId)">
                                <span 
                                    class="oi oi-trash">
                                </span>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="row">
            @*Resumen de la venta*@
            <div class="col card mt-1">
                <div class="row card-header">
                    <!-- Encabezado de la tarjeta -->
                    <div class="col-4">
                        <h5><b>Resumen:</b></h5>
                    </div>
                    <div class="col-4">
                        <!-- Sección de tipo de venta y botón de actualización -->
                        <div class="input-group">
                            <select class="form-control" readonly required @bind="@facturaRequest.TypePayment">
                                <option disabled selected value="">Tipo de Venta</option>
                                <option disabled value="1">Contado 💲</option>
                                <option disabled value="2">Crédito 💳</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-4">
                        <!-- Sección de pago -->
                        <div class="input-group d-print-none">
                            <input type="number" @bind="@facturaRequest.SaldoPagado" id="montoPagado" class="form-control"/>
                            <button class="btn btn-success rounded" type="button" @onclick="CalcularCambio">
                                Pagar
                            </button>
                        </div>
                    </div>
                </div>

                <div class="card-body text-left">
                    <div class="row">
                        <div class="col">
                            <!-- Lista de resumen -->
                            <ul class="list-unstyled">
                                <li class="mb-2">
                                    <strong>SubTotal: </strong>
                                    <span class="text-primary">$@($"{(facturaRequest.SubTotal - facturaRequest.ITBIS):N2}")</span>
                                </li>
                                <li class="mb-2">
                                    <strong>ITBIS:</strong>
                                    <span class="text-danger">$@($"{(facturaRequest.ITBIS):N2}")</span>
                                </li>
                                <li class="mb-2">
                                    <strong>Descuento: </strong>
                                    <span class="text-success">$@facturaRequest.TotalDesc.ToString("N2")</span>
                                </li>
                                <li class="mb-2">
                                    <strong>Importe: </strong>
                                    <span class="text-dark">
                                        <strong>$@($"{(facturaRequest.SubTotal - facturaRequest.TotalDesc):N2}")</strong>
                                    </span>
                                </li>
                                <li>
                                    <strong>Devuelta: </strong>
                                    @if(facturaRequest.Cambio > 0)
                                    {
                                        <span class="text-dark">
                                            $@facturaRequest.Cambio.ToString("N2")
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="text-dark">
                                            $0,00
                                        </span>
                                    }
                                </li>

                            </ul>
                        </div>
                    </div>
                </div>

            </div>

            @*Cambio del efectivo*@
            <div class="modal d-print-none" style="display: @(Chance ? "block" : "none"); background-color: rgba(0, 0, 0, 0.5);" tabindex="-1" role="dialog">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title"><b>Devuelta para el cliente</b></h5>
                        </div>

                        <div class="modal-body">
                            <h5><b>Cambio:</b> @facturaRequest.Cambio.ToString("N2")</h5>
                        </div>

                        <div class="modal-footer">
                            <button 
                                class="btn btn-danger d-print-none" 
                                type="button"
                                @onclick="CancelarPago">
                                <span class="oi oi-x"></span>
                            </button>
                            <button 
                                class="btn btn-success d-print-none" 
                                type="submit" @onclick="async ()=>{await PrintPageAsync(); Form=false; Chance=false;}">
                                <span class="oi oi-check"></span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </EditForm>
}
else
{
    @if(Facturas != null)
    {
        <div class="row">
            <div class="col-12">
                <h1 class="titulo">@TituloForm</h1>
            </div>
        </div>

        <div class="modal" style="display: @(detailsPago ? "block" : "none"); background-color: rgba(0, 0, 0, 0.5);" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header bg-dark text-white">
                        <h5 class="modal-title"><b>Detalles de los Pagos</b></h5>
                        <button type="button" class="close btn btn-danger d-print-none" data-dismiss="modal" aria-label="Close" @onclick="CloseDetailsPago">
                            <span aria-hidden="true" class="oi oi-x"></span>
                        </button>
                    </div>
                    <div class="modal-body">
                        @if(FacturaSinPagos)
                        {
                            <div class="alert alert-success" role="alert">
                                <h4 class="alert-heading">¡Aviso!</h4>
                                <p>Este cliente pago al contado 😎.</p>
                                <hr>
                                <p class="mb-0">Por favor, asegúrese de conservar este cliente. ¡Gracias!
                                </p>
                            </div>
                        }
                        else{
                            <table class="table table-hover">
                                <thead class="table" style="background-image: linear-gradient(180deg, rgb(0, 29, 82) 0%, rgb(0, 0, 0) 70%); color: #ffffff;">
                                    <tr>
                                        <th>FacturaId</th>
                                        <th>Monto/Pagado</th>
                                        <th>Observación</th>
                                        <th>Fecha</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var pago in PagosFacturaSeleccionada)
                                    {
                                        <tr>
                                            <td>@pago.FacturaID</td>
                                            <td>$@pago.MontoPagado.ToString("N2")</td>
                                            <td>@pago.Observacion</td>
                                            <td>@pago.Fecha.ToShortDateString()</td>
                                        </tr>
                                    } 
                                </tbody>
                            </table>
                        }
                    </div>
                    <div class="modal-footer bg-dark text-white d-print-none">
                        
                    </div>
                </div>
            </div>
        </div>

        <!-- Mostrar la lista de facturas -->
        <div class="table-container">
            <div class="card col-12">
                <div class="card-body">
                    <div class="row">
                        <div class="col-11">
                            <button class="btn btn-outline-primary d-print-none" 
                                @onclick="async ()=>{await PrintPageAsync();}">
                                <span class="oi oi-print"></span>
                            </button>
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col-8"></div>
                        <div class="col-4">
                            <div class="input-group d-print-none">
                                <input type="text" class="form-control border-0 border-bottom" 
                                    placeholder="Buscar por nombre" @bind="FiltroInvoice">
                                <button class="btn btn-outline input-group-text border-0 bg-white" 
                                    type="button" id="button-addon2" @onclick="()=>Consultar()">
                                    <span class="oi oi-magnifying-glass text-black"></span>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="row-12 mt-2">
                        <table class="table table-striped">
                            <thead class="table" style="background-image: linear-gradient(180deg, rgb(0, 29, 82) 0%, rgb(0, 0, 0) 70%); color: #ffffff;">
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Cliente</th>
                                    <th scope="col">Total</th>
                                    <th scope="col">ITBIS</th>
                                    <th scope="col">Descuento</th>
                                    <th scope="col">Importe</th>
                                    <th scope="col">Fecha</th>
                                    <th scope="col" class="d-print-none">...</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var f in Facturas)
                                {
                                    @if(f.TypePayment == "1" || f.SaldoPendiente == 0)    
                                    {
                                        <tr>
                                            <th scope="row">@f.Id</th>
                                            <td>@f.Cliente.Nombre @f.Cliente.Apellidos</td>
                                            <td>$@($"{(f.SubTotal - f.ITBIS):N2}")</td>
                                            <td>
                                                <span style="white-space: nowrap;">
                                                    $@($"{(f.ITBIS):N2}")
                                                </span>
                                            </td>
                                            <td>$@f.TotalDesc.ToString("N2")</td>
                                            <td><strong>$@($"{(f.SubTotal - f.TotalDesc):N2}")</strong></td>
                                            <td>@f.Fecha.ToShortDateString()</td>
                                            <td>
                                                <div class="button d-print-none">
                                                    <button @onclick="() => MostrarPagos(f)"
                                                        class="btn btn-outline-success">
                                                        <span class="oi oi-dollar"></span>
                                                    </button>
                                                        <button @onclick="()=>Seleccionar(f.Id, f)" class="btn btn-outline-warning">
                                                            <span class="oi oi-pencil"></span>
                                                        </button>
                                                    <button @onclick="() => Eliminar(f)" class="btn btn-outline-danger d-print-none" >
                                                        <span class="oi oi-trash"></span>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code
{
    public string TituloForm => ShowDetails == false ?
    "Módulo de facturas al contado" : "Módulo de facturación";
    public bool ShowDetails { get; set; } = false;
    public List<FacturaResponse> Facturas { get; set; } = new();
    public List<FacturaDetalleResponse> FacturaDetalles { get; set; } = new();
    public FacturaResponse? SelectedFactura { get; set; } // Factura seleccionada

    private string FormatPhoneNumber(string phoneNumber)
    {
        // Verifica si el número telefónico tiene la longitud esperada
        if (phoneNumber.Length == 10)
        {
            // Formatea el número telefónico
            return $"({phoneNumber.Substring(0, 3)}) {phoneNumber.Substring(3, 3)}-{phoneNumber.Substring(6)}";
        }
        else
        {
            // Devuelve el número telefónico sin cambios si no tiene la longitud esperada
            return phoneNumber;
        }
    }
    private string FormatCustomerId(string customerId)
    {
        // Verifica si el número telefónico tiene la longitud esperada
        if (customerId.Length == 11)
        {
            // Formatea el número telefónico
            return $"{customerId.Substring(0, 3)}-{customerId.Substring(3, 7)}-{customerId.Substring(10)}";
        }
        else
        {
            // Devuelve el número telefónico sin cambios si no tiene la longitud esperada
            return customerId;
        }
    }

    void Back2()
    {
        Form = false;
        Precio = 0;
    }
    async Task Consultar()
    {
        var resultado = await facturaServices.Consultar(FiltroInvoice);
        if (resultado.Success)
        {
            Facturas = resultado.Data?.OrderByDescending(f => f.Fecha).ToList() ?? new List<FacturaResponse>();
        }
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        await Consultar();
        await Consultar2();
        await CargarContacto();
        await CargarProducto();
        await CargarPagos();
    }
    public void Seleccionar(int Id, FacturaResponse factura)
    {
        Form = true;
        facturaRequest = Facturas
        .Where(c => c.Id == Id)
        .Select(c => c.ToRequest())
        .FirstOrDefault() ?? new FacturaRequest();

        PagosFacturaSeleccionada = Pagos.Where(p => p.FacturaID == factura.Id).ToList();
        facturaRequest.DineroPagado = 
        facturaRequest.SaldoPagado +
        PagosFacturaSeleccionada
        .Sum(c => (decimal)c.MontoPagado);
    }
    public async Task Eliminar(FacturaResponse user)
    {
        var resultado = await facturaServices.Eliminar(user.ToRequest());
        if (resultado.Success)
        {
            await Consultar();
            StateHasChanged();
        }
    }
    
    private async Task PrintPageAsync()
    {

        await JSRuntime.InvokeVoidAsync("printPage");
    }
    
    //Codigo Para mostrar todos los pagos realizados por factura
    public List<PagoResponse> PagosFacturaSeleccionada { get; set; } = new List<PagoResponse>();
    public bool FacturaSinPagos => PagosFacturaSeleccionada.Count == 0;
    public bool MostrarMensajeSinPagos { get; set; } = false;
    public bool detailsPago { get; set; } = false;
    public List<PagoResponse> Pagos { get; set; } = new();
    public FacturaResponse FacturaEnConfirmacion { get; set; } = new();
    public string Filtro { get; set; } = "";
    public string FiltroInvoice { get; set; } = "";
    async Task CargarPagos()
    {
        var resultado =
        await pagoServices.Consultar(Filtro);
        if (resultado.Success)
        {
            Pagos = resultado.Data!;
        }
    }
    void DetailsPago()
    {
        detailsPago = true;
    }
    void CloseDetailsPago()
    {
        detailsPago = false;
    } 
    void MostrarPagos(FacturaResponse factura)
    {
        SelectedFactura = factura;
        FacturaDetalles = factura.Detalles.ToList();
        PagosFacturaSeleccionada = Pagos.Where(p => p.FacturaID == factura.Id).ToList();
        detailsPago = true;
        StateHasChanged(); // Asegúrate de llamar a StateHasChanged para actualizar la interfaz de usuario.

    }



    public bool Chance { get; set; } = false;
    public bool Info { get; set; } = false;
    public bool Form { get; set; } = false;
    public string? Message { get; set; } = null;
    public string Nombre { get; set; } = string.Empty;
    public string ItemName { get; set; } = string.Empty;
    public List<ClienteResponse> Contactos { get; set; } = new();
    public List<ProductoResponse> Productos { get; set; } = new List<ProductoResponse>();
    public FacturaRequest facturaRequest { get; set; } = new();
    public FacturaDetalleRequest detalleFacturaRequest { get; set; } = new();
    public decimal Precio { get; set; } = 0;
    public int Cantidad { get; set; } = 1;
    public int IdProducto { get; set; } = 0;
    void BuscarPercio(int idProducto)
    {
        Precio = Productos.FirstOrDefault(p => p.Id == idProducto)!.Precio;
        IdProducto = idProducto;
    }
    void BuscarSeleccionarCliente(string Contacto)
    {
        var c = Contactos.FirstOrDefault(p => p.Nombre+" "+p.Apellidos == Contacto)!;
        if (c != null) facturaRequest.ClienteId = c.Id;
    }
    void EliminarDetalle(int Id)
    {
        var detalle = facturaRequest.Detalles
        .FirstOrDefault(d => d.ProductoId == Id);
        // Actualizar el stock del producto en la base de datos
        productoServices.StockDevuelto(detalle.ProductoId, detalle.Cantidad);
        if (detalle != null)
        {
            facturaRequest.Detalles.Remove(detalle);
        }
    }
    async Task AgregarAlDetalle()
    {
        if (detalleFacturaRequest.Descuento > 30)
        {
            Message = "😒 El descuento no puede ser mayor a 30%. 💰";
            return;
        }

        Message = null;
        var producto = Productos.FirstOrDefault(p => p.Id == IdProducto);

        if (producto != null)
        {
            var detalleExistente = facturaRequest.Detalles.FirstOrDefault(d => d.ProductoId == IdProducto);

            if (detalleExistente != null)
            {
                int nuevaCantidad = detalleExistente.Cantidad + Cantidad;

                if (nuevaCantidad <= producto.Stock)
                {
                    detalleExistente.Cantidad = nuevaCantidad;
                }
                else
                {
                    Message = "No hay suficientes artículos en el stock. 😥";
                    return;
                }
            }
            else
            {
                if (Cantidad <= producto.Stock)
                {
                    facturaRequest.Detalles.Add(new FacturaDetalleRequest
                    {
                        ProductoId = IdProducto,
                        Descripcion = producto.Nombre,
                        Precio = producto.Precio,
                        Cantidad = Cantidad,
                        Descuento = detalleFacturaRequest.Descuento
                    });
                    Cantidad = 1;
                }
                else
                {
                    Message = "No hay suficientes artículos en el stock. 😥";
                    return;
                }
            }

            // Actualizar el stock del producto en la base de datos
            await productoServices.ActualizarStock(IdProducto, Cantidad);

            Message = null;
        }
    }
 async Task CargarContacto()
    { 
        //Llenar la lista de contactos para mostrar al usuario...
        var r = await clienteServices.Consultar("");
        if (r.Success)
        {
            Contactos = r.Data!;
        }
    }
    async Task CargarProducto()
    { 
        //Llenar la lista de contactos para mostrar al usuario...
        var r = await productoServices.Consultar("");
        if (r.Success)
        {
            Productos = r.Data!;
        }
    }

    //Esto es para mostrar el Numero de la factura a registrar
    int ultimoIdFactura = 0;
    async Task Consultar2()
    {
        var resultado = await facturaServices.Consultar(Filtro);
        if (resultado.Success)
        {
            Facturas = resultado.Data?.OrderByDescending(f => f.Fecha).ToList() ?? new List<FacturaResponse>();

            // Obtener el Id de la última factura registrada + 1
            ultimoIdFactura = Facturas.FirstOrDefault()?.Id + 1 ?? 1;
        }
        StateHasChanged();
    }

    int facturaId;
   
    public string TypePayment {get; set;} = string.Empty;
    async Task Send()
    {
        if (facturaRequest.SaldoPagado > facturaRequest.SaldoPagado - facturaRequest.TotalDesc 
            && facturaRequest.TypePayment == "2")
        {
            Pendiente();

            return;
        }
        
        BuscarSeleccionarCliente(Nombre);

        var result = await facturaServices.Modificar(facturaRequest);
        Message = null;

        await Consultar();
        Precio = 0;
        if (!result.Success)
        {
            Message = "Estoy cansado de trabajar 😥";
            return;
        }
    }

    void CancelarPago()
    {
        Chance = false;
        Total = 0;
        MontoPagado = 0;
        Cambio = 0;
    }

    public decimal Cambio = 0;
    public decimal MontoPagado = 0;
    public decimal SaldoPendiente = 0;
    public decimal Total = 0;
    void CalcularCambio()
    {
        if(facturaRequest.SaldoPagado < facturaRequest.SubTotal - facturaRequest.TotalDesc &&  facturaRequest.TypePayment == "1")
        {
            Message = "😒 El monto pagado no puede ser menor al importe de la factura 💰";
            return;
        }
        if (facturaRequest.Detalles.Count == 0)
        {
            Message = "😒 Debes agregar al menos un producto al detalle. 🛒";
            return;
        }

        if (string.IsNullOrEmpty(facturaRequest.TypePayment))
        {
            Message = "😒 Debes seleccionar el tipo de venta. 💰";
            return;
        }
        
        var clienteSeleccionado = Contactos.FirstOrDefault(c => c.Nombre + " " + c.Apellidos == Nombre);
        if (facturaRequest.TypePayment == "2" && LimiteCreditoExcedido())
        {
            Message = "😥 El límite de crédito del cliente ha sido excedido. $"
            + clienteSeleccionado.Limitecredito.ToString("N2");
            return;
        }

        if (facturaRequest.TypePayment == "2")
        {
            Info = true;
        }

        Chance = true;
        Message = null;
    }
    bool LimiteCreditoExcedido()
    {
        // Aquí deberías obtener el límite de crédito del cliente seleccionado
        // Puedes acceder a la información del cliente desde la lista de contactos
        var clienteSeleccionado = Contactos.FirstOrDefault(c => c.Nombre + " " + c.Apellidos == Nombre);
        
        if (clienteSeleccionado != null && clienteSeleccionado.Limitecredito < 
            facturaRequest.SubTotal - facturaRequest.TotalDesc)
        {
            return true;
        }

        return false;
    }
    void Pendiente()
    {
        if(facturaRequest.TypePayment=="2")
        {
            if(MontoPagado >= Total){
                Message = "El monto pagado no puede ser mayor o igual al total 😢";
                return;
            }
        }
        Chance = true;
        MontoPagado = facturaRequest.SaldoPagado;
        Total = facturaRequest.SubTotal - facturaRequest.TotalDesc;
        Cambio = MontoPagado - Total;
        SaldoPendiente = Total - MontoPagado;
        Message = null;
    }
}